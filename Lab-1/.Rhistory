bag.boston
yhat.bag <- predict(bag.boston, newdata = Boston[-train,])
boston.test<-Boston[-train,"mdev"]
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag-boston.test)^2)
boston.test<-Boston[-train,"medv"]
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag-boston.test)^2)
abline(0,1,"red")
abline(0,1,col="red")
boston.test<-Boston[-train,"medv"]
plot(yhat.bag, boston.test)
abline(0,1,col="red")
bag.boston<-randomForest(medv~.,data=Boston,subset=train, mtry=13,ntree=25)
yhat.bag<-predict(bag.boston, newdata = Boston[-train,])
mean((yhat.bag-boston.test)^2)
mean((yhat.bag-boston.test)^2)
yhat.bag <- predict(bag.boston, newdata = Boston[-train,])
boston.test<-Boston[-train,"medv"]
plot(yhat.bag, boston.test)
abline(0,1,col="red")
mean((yhat.bag-boston.test)^2)
set.seed(1)
train <- sample(1:nrow(Boston), nrow(Boston)/2)
bag.boston <- randomForest(medv~.,data=Boston, subset=train, mtry=13)
bag.boston
yhat.bag <- predict(bag.boston, newdata = Boston[-train,])
boston.test<-Boston[-train,"medv"]
plot(yhat.bag, boston.test)
abline(0,1,col="red")
mean((yhat.bag-boston.test)^2)
bag.boston<-randomForest(medv~.,data=Boston,subset=train, mtry=13,ntree=25)
yhat.bag<-predict(bag.boston, newdata = Boston[-train,])
mean((yhat.bag-boston.test)^2)
yhat.bag<-predict(bag.boston, newdata=Boston[-train,])
mean((yhat.bag-boston.test)^2)
bag.boston<-randomForest(medv~.,data=Boston,subset=train, mtry=13,ntree=6)
rf.boston<-randomForest(medv~.,data=Boston,subset=train, mtry=6)
yhat.rf<-predict(rf.boston, newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
set.seed(3)
y <- rnorm(100)
Auto <- read.table("Auto.data")
getwd()
setwd("/Users/jcaceres/Documents/RHUL/CS4100:CS5100 DataAnalysis/rhul-dataanlysis/Lab-1")
Auto <- read.table("Auto.data")
Auto <- read.table("Auto.data", header=T, na.strings = "?")
summary(Auto)
range(mpg)
attach(Auto)
range(mpg)
range(displacement)
range(horsepower)
horespower
summary(horespower)
summary(Auto)
summary(horsepower)
range(horsepower)
horsepower
range(horsepower)
?range
range(horsepower, nar.rm=)
range(horsepower, nar.rm=FALSE)
range(horsepower, nar.rm=TRUE)
range(horsepower, na.rm=TRUE)
range(horsepower, na.rm=FALSE)
range(horsepower, na.rm=TRUE)
range(weight)
range(acceleration)
8.0 24.8
acceleration
range(acceleration)
summary(cylinders)
(cylinders)
describe(cylinders)
sd(cylinders)
mean(cylinders)
sd(cylinders)
mean(year)
sd(year)
mean(origin)
sd(origin)
sd(origin) # 0.8025495
mean(name)
name
Auto
Auto <-Auto(-c(10:85))
Auto <- na.omit(Auto)
range(mpg)
range(displacement)
range(horsepower, na.rm=TRUE)
range(weight)
range(acceleration)
mean(cylinders) #5.458438
sd(cylinders) #1.701577
mean(year) #75.99496
sd(year) # 3.690005
mean(origin) # 1.574307
sd(origin) # 0.8025495
Auto <-Auto(-c(10:85))
Auto <- Auto(-c(10:85))
attach(Auto)
Auto <- Auto(-c(10:85))
Auto <- na.omit(Auto)
Auto <- Auto(-c(10:85))
Auto <-Auto[-c(10:85),]
range(mpg)
range(displacement)
range(horsepower, na.rm=TRUE)
range(weight)
range(acceleration)
# 8.0 24.8
mean(cylinders) #5.458438
sd(cylinders) #1.701577
mean(year) #75.99496
sd(year) # 3.690005
mean(origin) # 1.574307
sd(origin) # 0.8025495
Auto <- na.omit(Auto)
Auto <-Auto[-c(10:85),]
range(mpg)
# 9.0 46.6
range(displacement)
range(horsepower, na.rm=TRUE)
range(weight)
range(acceleration)
mean(cylinders) #5.471939
sd(cylinders) #1.705783
mean(year) #75.97959
sd(year) # 3.683737
mean(origin) # 1.576531
sd(origin) # 0.8055182
Auto <- na.omit(Auto)
rm(list = ls())
Auto <- na.omit(Auto)
Auto <- read.table("Auto.data")
Auto <- na.omit(Auto)
Auto <- na.omit(Auto)
Auto <- read.table("Auto.data")
Auto <- na.omit(Auto)
Auto <- read.table("Auto.data")
Auto <- na.omit(Auto)
rm(list = ls())
Auto <- read.table("Auto.data")
Auto <- na.omit(Auto)
Auto <- read.table("Auto.data", header=T, na.strings = "?")
Auto <- read.table("Auto.data")
Auto <- read.table("Auto.data", header=T, na.strings = "?")
Auto <- na.omit(Auto)
attach(Auto)
plot(name, years)
plot(name, year)
names(Auto)
plot(origin)
plot(weight, acceleration, col="red")
plot(weight, acceleration, col="red")
weight
summary(weight)
identify(weight, acceleration, name)
identify(weight, acceleration)
identify(weight, acceleration)
plot(weight, acceleration, col="red")
identify(weight, acceleration)
Auto[59]
59]
Auto[1,59]
Auto[59,:]
Auto[59,]
plot(weight, acceleration, col="red")
identify(weight, acceleration)
# plot acceleration compared to the weight
plot(weight, acceleration, col="red")
identify(weight, acceleration)
# Auto[298,]
Auto[298,]
Auto[59,]
plot(mpg, acceleration, col="red")
identify(mpg, acceleration)
plot(acceleration, mpg, col="red")
identify(acceleration, mpg)
Auto[321,]
Auto[319,]
21
Auto[321,]
plot(year, mpg, col="red")
identify(year, mpg)
identify(year, mpg)
Auto[328,]
summary(acceleration)
names(acceleration)
describe(acceleration)
summary
summary(acceleration)
Auto[328,]
plot(acceleration, mpg, col="red")
identify(acceleration, mpg)
plot(year, mpg, col="red")
identify(year, mpg)
plot(year, mpg, col="red")
identify(year, mpg)
plot(acceleration, mpg, col="red")
identify(acceleration, mpg)
plot(acceleration, mpg, col="red")
identify(mpg, acceleration)
plot( mpg,acceleration, col="red")
identify(mpg, acceleration)
plot( mpg,acceleration, col="red")
identify(mpg, acceleration)
plot( acceleration, mpg, col="red")
identify(acceleration, acceleration, name)
plot( acceleration, mpg, col="red")
identify(acceleration, acceleration, name)
plot( acceleration, mpg, col="red")
identify(acceleration, acceleration)
plot(acceleration, mpg, col="red")
identify(acceleration, acceleration)
Auto[328,]
Auto[328,]
# rm(list=ls())
rm(list=ls())
library(MASS)
data(Boston)
names(Boston)
?Boston
set.seed(1)
train <- sample(1:nrow(Boston), 200)
test = -train
test = !train
test = -train
test = -train
train <- sample(1:nrow(Boston), 200)
test = -train
train <- sample(1:nrow(Boston), 200)
test = -train
set.seed(1)
train <- sample(1:nrow(Boston), 200)
test = -train
library(tree)
library(ISLR)
data("Carseats")
names(Carseats)
attach(Carseats)
head(Carseats)
range(Sales)
train <- sample(1:nrow(Carseats), 200)
test = -train
train_data = Carseats[train,]
testing_data = Carseats[test,]
head(training_data)
training_data = Carseats[train,]
head(training_data)
head(testig_data)
head(testing_data)
rm(list = ls())
library(tree)
library(ISLR)
data("Carseats")
names(Carseats)
attach(Carseats)
head(Carseats)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
test = -train
training_set = Carseats[train,]
testing_set = Carseats[test,]
head(testing_data)
head(testing_set)
tree_model = tree(Sales~., training_set)
plot(tree_model)
text(tree_model, pretty = 0)
summary(tree_model)
test_medv = medv[test]
library(MASS)
test_medv = medv[test]
rm(list = ls())
library(tree)
library(ISLR)
data("Carseats")
names(Carseats)
attach(Carseats)
head(Carseats)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
test = -train
training_set = Carseats[train,]
testing_set = Carseats[test,]
testing_sales = Sales[test,]
summary(Carseats)
testing_sales = Sales[test,]
testing_sales = Sales[test]
tree_model = tree(Sales~., training_set)
plot(tree_model)
tree_model
plot(tree_model)
plot(tree_model)
text(tree_model, pretty = 0)
tree_pred = predict(tree_model, testing_set)
mean((tree_pred - testing_sales)^2)
cv_tree <- cv.tree(tree_model)
names(cv_tree)
plot(cv_tree$size,
cv_tree$dev,
type = "b",
xlab = "Tree Size",
ylab = "MSE")
identify(cv_tree)
cv_tree$dev)
identify(cv_tree$size,
cv_tree$dev)
which.min(cv_tree$dev)
cv_tree$size[2]
pruned_model = prune.tree(tree_model, 16)
plot(pruned_model)
text(pruned_model, pretty = 0)
pruned_model = prune.tree(tree_model, 10)
plot(pruned_model)
text(pruned_model, pretty = 0)
pruned_model = prune.tree(tree_model, 16)
plot(pruned_model)
text(pruned_model, pretty = 0)
tree_pred = predict(pruned_model, testing_set)
mean((tree_pred - testing_sales)^2)
pruned_model = prune.tree(tree_model, 10)
tree_pred = predict(pruned_model, testing_set)
mean((tree_pred - testing_sales)^2)
pruned_model = prune.tree(tree_model, 10)
tree_pred = predict(pruned_model, testing_set)
mean((tree_pred - testing_sales)^2)
pruned_model = prune.tree(tree_model, 4)
tree_pred = predict(pruned_model, testing_set)
mean((tree_pred - testing_sales)^2)
tree_model = tree(Sales~., training_set)
tree_pred = predict(tree_model, testing_set)
mean((tree_pred - testing_sales)^2)
cv_tree <- cv.tree(tree_model)
pruned_model = prune.tree(tree_model, 4)
plot(pruned_model)
text(pruned_model, pretty = 0)
pruned_model = prune.tree(tree_model, 4)
plot(pruned_model)
tree_model = tree(Sales~., training_set)
tree_model
tree_pred = predict(tree_model, testing_set)
mean((tree_pred - testing_sales)^2)
cv_tree <- cv.tree(tree_model)
cv_tree$size[2]
pruned_model = prune.tree(tree_model, 4)
tree_pred = predict(pruned_model, testing_set)
mean((tree_pred - testing_sales)^2)
?cls
?c?cls
??cls
rm(list = ls())
rm()
list()
ls()
library(MASS)
library(ISLR)
data(Boston)
attach(Boston)
names(Boston)
?Boston
lm.fit <- lm(medv~lstat)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
predict(lm.fit, data.frame(lstat=c(5,10,15)))
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col="red")
plot(lstat, medv, col="red")
plot(lstat, medv, pch=20)
plot(lstat, medv, pch="+")
plot(1:20, 1:20, pch=1:20)
# In order to t a multiple linear regression model using Least Squares, we
# again use the lm() function. The syntax lm(y~x1+x2+x3) is used to t a model
# with three attributes, x1, x2, and x3.
lm.fit <- lm(medv~lstat+age, data=Boston)
lm.fit
lm.fit <- lm(medv~., data = Boston)
lm.fit
fix(Carseats)
names(Carseats)
lm.fit <- lm(Sales~., data=Carseats)
lm.fit
attach(Carseats)
contrasts(ShelveLoc)
names(Smarket)
summary(Smarket)
attach(Smarket)
#The syntax of the
#glm() function is similar to that of lm(), except that we must pass in the
#argument family=binomial in order to tell R to run a logistic
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data = Smarket, family=binomial)
glm.fit
coef(glm.fit)
?lm
x<- [100, 3000, 4000,7000,8500,9100,11300]
x<- c(100, 3000, 4000,7000,8500,9100,11300)
x
y <- c(16,-2, -14, -25, -32, -48, -59)
mean(x)
mean(y)
sd(x,y)
?sd
var(x,y)
var(y,x)
cov(x,y)
sd(x)
plot(x,y)
hist(x)
x
y
length(x)
length(y)
?var
var(x)
mean(x)
mean(y)
sd(x)
var(x)
mean(sd(x))
mean(sd(x(:)))
mean(sd(x[:])
mean(sd(x[,])
;
mean(sd(x[,:])
cov(x,y)
x
y
cov(x,y)
var(x,y,na.rm = TRUE)
cov(x)
cov(x,NULL)
cov2cor(x,y)
y
var(x)
x
cor(x,y)
var(x, y)
?lm
rm(list=ls())
library(MASS)
library(ISLR)
data(Boston)
attach(Boston)
lm.fit <- lm(medv~lstat)
summary(lm.fit)
summary(lm.fit)
lm.fit
plot(lm.fit)
plot(lm.fit)
names(lm.fit)
coef(lm.fit)
predict(lm.fit, data.frame(lstat=c(5,10,15)))
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col="red")
plot(lstat, medv, pch=20)
plot(lstat, medv, pch="+")
plot(1:20, 1:20, pch=1:20)
lm.fit <- lm(medv~lstat+age, data=Boston)
lm.fit
lm.fit <- lm(medv~., data = Boston)
lm.fit
names(Carseats)
lm.fit <- lm(Sales~., data=Carseats)
lm.fit
contrasts(ShelveLoc)
names(Smarket)
summary(Smarket)
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data = Smarket, family=binomial)
glm.fit
coef(glm.fit)
plot(glm.fit)
glm.probs <- predict(glm.fit, type = "response")
glm.probs[1:6]
contrasts(Direction)
glm.pred <- rep("Down", 1250)
glm.pred[glm.probs>.5]<- "Up"
table(glm.pred, Direction)
table(glm.pred, Direction)
mean(glm.pred!=Direction)
mean(glm.pred==Direction)
train <- (Year<2005)
Smrket.2005<-Smarket[!train,]
dim(Smarket.2005)
Smarket.2005<-Smarket[!train,]
dim(Smarket.2005)
Direction.2005 <- Direction[!train]
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data = Smarket,
family=binomial, subset = train)
glm.fit
glm.probs <- predict(glm.fit, Smarket.2005, type="response")
glm.pred <- rep("Down", 252)
gml.pred[gml.probs>.5] <- "Up"
glm.pred[glm.probs>.5] <- "Up"
table(glm.pred, Direction.2005)
mean(glm.pred== Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fit <- glm(Direction~Lag1+Lag2,data = Smarket,
family=binomial, subset = train)
glm.probs <- predict(glm.fit, Smarket.2005, type="response")
glm.pred <- rep("Down", 252)
glm.pred[glm.probs>.5] <- "Up"
table(glm.pred, Direction.2005)
mean(glm.pred== Direction.2005)
predict(glm.fit, newdata = data.frame(Lag1=c(1.2,1.5), Lag2=c(1.1,-0.8)), type = "response")
